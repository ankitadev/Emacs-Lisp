#+BEGIN_SRC emacs-lisp
  (defun is-divisible-by-2 (n)
    (let* ((digits-as-string (number-to-string n))
           (last-digit (elt digits-as-string (- (length digits-as-string) 1))))
      (or (= last-digit ?0)
          (= last-digit ?2)
          (= last-digit ?4)
          (= last-digit ?6)
          (= last-digit ?8))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  (defun sum-of-digits (number)
    (apply '+ (mapcar (lambda (d) (- d ?0)) (number-to-string number))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (sum-of-digits 1598795)
#+END_SRC

#+RESULTS:
: 44

#+BEGIN_SRC emacs-lisp :results silent
  (defun is-divisible-by-3 (number)
    "Checks divisibility by 3 by a simple rule.
  Does not work for negative numbers."
    (or (= number 3)
        (= number 6)
        (= number 9)
        (zerop number)
        (unless (< number 10)
          (is-divisible-by-3 (sum-of-digits number)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp

  (is-divisible-by-3 871987398719952888)
#+END_SRC

#+RESULTS:
: t

#+BEGIN_SRC emacs-lisp

(defun is-divisible-by-4 (number)
   (let* ((digit-as-string (number-to-string number))
         (last-digit (elt digits-as-string (- (length digits-as-string) 2))))
      (or (= last-digit ?


#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun is-divisible-by-5(n)
    (let* ((digits-as-string (numer-to-string n))
          (last-digit (elt digits-as-string (- (length digits-as-string) 1 ))))
    (or (= last-digit ?0)
        (= last-digit ?5))))
#+END_SRC

#+RESULTS:
: is-divisible-by-5

#+BEGIN_SRC emacs-lisp
(is-divisible-by-5 7827563929293005)
#+END_SRC
